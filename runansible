#!/bin/bash
# Runs a playbook in a project (for cron)

# Add ARA to PYTHONPATH
export PYTHONPATH=$PYTHONPATH:/opt/ansible/tools/ara

# Load GPG agent's soocket if it isn't there
[ -z "$SSH_AUTH_SOCK" ] && export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

# Defaults
PROJECTDIR=/opt/ansible/projects
PLAYBOOKDIR=playbooks
UPDATE_ROLES=false
OLD_ANSIBLE=false
UPDATE_GIT=false
IGNORE_LOCK=false
SPARSE=false
INVENTORY=""
DEFAULT_BRANCH=master

# Override any defaults that are set by the user
test -f $HOME/.runansible.conf && . $HOME/.runansible.conf

usage="Usage: $0 [-p project] [-i inventory] [-s] playbook.yml

    -b branch    Run on specific git branch
                 When using this option, the script will check out the specified
                 git branch, run Ansible and then check out $DEFAULT_BRANCH
    -g           Update git checkout before running
    -l           Ignore locks and allow for multiple instances of $(basename $0)
    -p project   Name of the project to run the playbook from
    -i project   Name of the inventory to use, can be provided multiple times
    -r           Update roles before running playbook
    -R           Update roles before running playbook (compatible with 2.9)
    -s           Make Ansible's output sparse
    -h           This text

By default, this script will attempt to exclusively lock the playbook that is executed.
This is to prevent multiple runs of the same playbook at once.
"

BRANCH=$DEFAULT_BRANCH

while getopts "b:glhi:p:srR" opt; do
  case ${opt} in
    b)
      BRANCH="$OPTARG"
      ;;
    g)
      UPDATE_GIT=true
      ;;
    l)
      IGNORE_LOCK=true
      ;;
    p)
      PROJECT="$OPTARG"
      ;;
    i)
      INVENTORY="${INVENTORY} -i $OPTARG"
      ;;
    s)
      export ANSIBLE_DISPLAY_FAILED_STDERR=true
      export ANSIBLE_DISPLAY_OK_HOSTS=false
      export ANSIBLE_DISPLAY_SKIPPED_HOSTS=false
      export SPARSE=true
      ;;
    r)
      UPDATE_ROLES=true
      ;;
    R)
      UPDATE_ROLES=true
      OLD_ANSIBLE=true
      ;;
    h)
      echo -e "$usage"
      exit 0
      ;;
  esac
done

shift $[$OPTIND -1]
PLAYBOOK=$1
shift 1

[ -z "$PROJECT" ] || [ -z "$PLAYBOOK" ] && echo "$usage" && exit 1

cd $PROJECTDIR/$PROJECT

# check for update_checkout and use that if it's present
if $UPDATE_GIT
then
  if [ -x scripts/update_checkout.sh ]
  then
    scripts/update_checkout.sh $BRANCH > /dev/null 2>&1
  else
    git pull >/dev/null 2>&1
  fi
fi

if $UPDATE_ROLES
then
  if [ -f roles/requirements.yml ]
  then
    if $SPARSE
    then
      ansible-galaxy install -fr roles/requirements.yml >/dev/null 2>&1
      $OLD_ANSIBLE && ansible-galaxy collection install -fr roles/requirements.yml >/dev/null 2>&1
    else
      ansible-galaxy install -fr roles/requirements.yml | egrep -v '[Dd]ownloading|changing|extracting|Installing|Process'
      $OLD_ANSIBLE && ansible-galaxy collection install -fr roles/requirements.yml | egrep -v '[Dd]ownloading|changing|extracting|Installing|Process'
    fi
  else
    if $SPARSE
    then
      ansible-galaxy install -fr requirements.yml >/dev/null 2>&1
      $OLD_ANSIBLE && ansible-galaxy collection install -fr requirements.yml >/dev/null 2>&1
    else
      ansible-galaxy install -fr requirements.yml | egrep -v '[Dd]ownloading|changing|extracting|Installing|Process'
      $OLD_ANSIBLE && ansible-galaxy collection install -fr requirements.yml | egrep -v '[Dd]ownloading|changing|extracting|Installing|Process'
    fi
  fi
fi

LOCK_CMD="flock -w 5 -x -E 66 $PLAYBOOKDIR/$PLAYBOOK "
if $IGNORE_LOCK
then
  echo "WARNING: Ignoring locking and starting concurrent run

Current active branch: $(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
"
  LOCK_CMD=""
fi

if [ -n "$BRANCH" ]
then
  git checkout $BRANCH
fi

$LOCK_CMD ansible-playbook $INVENTORY -e ara_playbook_name="'$PROJECT - $PLAYBOOK'" --diff $PLAYBOOKDIR/$PLAYBOOK "$@"

if [ $? -eq 66 ]
then
  echo "ERROR: Unable to acquire lock
  Project:               $PROJECT
  Playbook:              $PLAYBOOK
  Current active branch: $(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
Please try again later..."
fi

if [ -n "$BRANCH" ]
then
  git checkout $DEFAULT_BRANCH
fi
